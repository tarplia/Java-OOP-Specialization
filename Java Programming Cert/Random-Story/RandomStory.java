/*
This program creates a story using a template provided in the source file.
It works by replacing placeholder words, such as <noun>, with a random word of that type.
This approach uses a HashMap that maps a String representing a category to an ArrayList of words in that category.
The ArrayList is created by reading the words from the associated file.

@author: Lia Pratomo.
@date: 04/28/2022.
*/

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Scanner;

public class RandomStory {
    private static HashMap<String, ArrayList<String>> myMap;
    private static ArrayList<String> usedWords;
    private static String[] types;
    private static Random myRandom;

    public RandomStory() throws Exception {
        myRandom = new Random();
        myMap = new HashMap<>();
        usedWords = new ArrayList<>();
        initializeFromSource("resources");
    }

    // Read words from the associated source file and store them in myMap according to its type.
    private static void initializeFromSource(String source) throws Exception {
        types =
                new String[] {
                    "adjective",
                    "noun",
                    "color",
                    "country",
                    "name",
                    "animal",
                    "timeframe",
                    "verb",
                    "fruit",
                    "number"
                };

        for (String type : types) {
            ArrayList<String> list = readIt(new File(source + "/" + type + ".txt"));
            myMap.put(type, list);
        }
    }

    // Find a random word from a list.
    private static String randomFrom(ArrayList<String> source) {
        int index = myRandom.nextInt(source.size());
        return source.get(index);
    }

    // Find a substitute word according to the specified type stored in myMap.
    private static String getSubstitute(String label) {
        for (String type : types) {
            if (label.equals(type)) {
                return randomFrom(myMap.get(type));
            }
        }

        return "**UNKNOWN**";
    }

    private static String processWord(String w) {
        int first = w.indexOf("<");
        int last = w.indexOf(">", first);

        // Return w if w doesn't contain "<" or ">".
        if (first == -1 || last == -1) return w;

        String type = w.substring(first + 1, last);

        // Find a non-duplicate substitute word.
        String sub = getSubstitute(type);
        while (usedWords.contains(sub)) {
            sub = getSubstitute(type);
        }

        String prefix = w.substring(0, first);
        String suffix = w.substring(last + 1);

        // Return the substituted word with it's prefix and suffix intact.
        return prefix + sub + suffix;
    }

    // Print the story according to the specified max character per line.
    private static void printOut(String s, int lineWidth) {
        int charsWritten = 0;
        for (String w : s.split("\\s+")) {
            if (charsWritten + w.length() > lineWidth) {
                System.out.println();
                charsWritten = 0;
            }
            System.out.print(w + " ");
            charsWritten += w.length() + 1;
        }

        System.out.println();
    }

    // Create a new story from template provided in the source file.
    private static String fromTemplate(File source) throws Exception {
        String story = "";
        Scanner resource = new Scanner(source);

        // Read word by word from story template.
        while (resource.hasNext()) {
            // Process the word and add it to story.
            story = story + processWord(resource.next()) + " ";
        }

        return story;
    }

    // Read data from the source file and store them to an ArrayList.
    private static ArrayList<String> readIt(File source) throws Exception {
        ArrayList<String> list = new ArrayList<String>();
        Scanner resource = new Scanner(source);

        // Read data line by line.
        while (resource.hasNextLine()) {
            list.add(resource.nextLine());
        }

        return list;
    }

    public static void makeStory() throws Exception {
        // Initialize RandomStory.
        RandomStory rs = new RandomStory();

        // Generate a story from template in the source file.
        String story = fromTemplate(new File("resources/madtemplate2.txt"));

        // Display the story generated by specifying the max char per line.
        printOut(story, 100);
    }

    public static void main(String[] args) throws Exception {
        makeStory();
    }
}
